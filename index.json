{
  "ConsoleApps/List-SharingLinks/List-SharingLinks.html": {
    "href": "ConsoleApps/List-SharingLinks/List-SharingLinks.html",
    "title": "List-SharingLinks | DW Scripts Lib",
    "summary": "List-SharingLinks SYNOPSIS This console application gets you started using the Microsoft Graph API C# SDK v5.77, written in .NET 8. It connects to the Graph API using a client secret. Some sample methods are provided, such as fetching a site, its lists, list items. Mostly the focus is on fetching any custom permissions on driveItems, detecting sharing links. Sharing links are detected by checking the driveItem/ /permissions endpoint. When the 'link' property is not null, it is a sharing link. The following output can be found: Shared with who? Role (read | write) Type (view | edit) Scope (anonymous | users | organization) Prevents download (boolean) Has password (boolean) Expiration date (optional DateTime) SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/ConsoleApps/List-SharingLinks. Relevant MS docs For getting driveItems, detecting sharing links: A permission on a drive item: Permissions have many different forms. The permission resource represents these different forms through facets on the resource. A sharing link (specific type of permission): if a permission resource has a non-null sharingLink facet, the permission represents a sharing link (as opposed to permissions granted to a person or group). Create sharing link Listing permissions: you can differentiate if the permission is inherited or not by checking the inheritedFrom property Grant access to an existing sharing link Delete a sharing permission from a file: this correctly removes the sharing link as perceived in the SPO UI Accessing shared drive items: did not contain any extra useful info (although 'owner' should be in there)... Shared drive item: did not contain any extra useful info (although 'owner' should be in there)... AUTHOR Name: Pieter Heemeryck Email: pieter.heemeryck@delaware.pro Prerequisites The code uses .NET 8 so this must be installed A valid app registration (client id, client secret) with the following application permissions: Sites.ReadWrite.All Running the console app Running in visual studio Open Visual Studio Solution Update the user secrets of the project (see the appsettings.json file) Run the console application Screenshots None Tags Microsoft Graph"
  },
  "ConsoleApps/Manage-ExternalGraphConnector/Manage-ExternalGraphConnector.html": {
    "href": "ConsoleApps/Manage-ExternalGraphConnector/Manage-ExternalGraphConnector.html",
    "title": "Manage-ExternalGraphConnector | DW Scripts Lib",
    "summary": "Manage-ExternalGraphConnector SYNOPSIS This console application can help you in managing custom connectors for the Microsoft Graph API. It connects to the Graph API and can handle the following commands: View all registered connectors View the search schema of all registered connectors Create a new external connector Delete an external connector Register a search schema for an existing connector SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/ConsoleApps/Manage-ExternalGraphConnector. The code is also partly based on the PartsInventoryConnector sample: https://github.com/microsoftgraph/msgraph-search-connector-sample/tree/main/PartsInventoryConnector AUTHOR Name: Robin Agten Email: robin.agten@delaware.pro Prerequisites The code uses .NET Core 7 so this must be installen A valid app registration (client id, client secret) with the following applicatoin permissions: ExternalConnection.ReadWrite.All ExternalItem.ReadWrite.All Running the console app Running in visual studio Open Visual Studio Solution Update the user secrets of the project (see the secrets_sample.json file) Run the console application Running in the command line It is also possible to run it via the command line. .\\Imec.WhoIsWho.ConnectorSetup.exe -s \"CLIENT_SECRET\" -c \"CLIENT_ID\" -t \"TENANT_ID\" Schema definition To register a schema, you need to create it in the code base: Create a new class in the Schemas folder Make sure the schema inherits from the SchemaBase Implement the GetSchemaProperties() method that returns a list of all properties (See the DemoSchema.cs file for an example) Screenshots Overview Creating a connector Deleting a connector Registering a schema Tags Microsoft Graph External Connector"
  },
  "PowerShell/Add-GraphPermissionsToManagedIdentity/Add-GraphPermissionsToManagedIdentity.html": {
    "href": "PowerShell/Add-GraphPermissionsToManagedIdentity/Add-GraphPermissionsToManagedIdentity.html",
    "title": "Add-GraphPermissionsToManagedIdentity | DW Scripts Lib",
    "summary": "Add-GraphPermissionsToManagedIdentity SYNOPSIS This script can be used to add Graph Permissions to the Managed Identity of your App Service. Keep in mind that you need Global Admin permissions to run this script. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Add-GraphPermissionsToManagedIdentity AUTHORS Name: Wout Torremans Email: wout.torremans@delaware.pro SYNTAX {Example} (Default) ./Add-GraphPermissionsToManagedIdentity-AzureADModule.ps1 -tenantId <string> -managedIdentityName <string> -permissions <string[]> ./Add-GraphPermissionsToManagedIdentity-AzModule.ps1 -tenantId <string> -managedIdentityObjectId <string> -permissions <string[]> Prerequisites AzureADModule The following PowerShell modules need to be installed AzureAD Microsoft.Graph Prerequisites AzModule The following PowerShell modules need to be installed Az Description The following steps are executed: A login pompt will be shown, you will need to login with a Global Admin of the tenant The Microsoft Graph service principal and the service principal of the managed identity you provided will be retrieved The correct App roles that are linked with the Microsoft Graph Service Principal are retrieved, if you provide a service principal that is not available it will not be added A connection with Graph will be made with the following Scopes: Application.Read.All, AppRoleAssignment.ReadWrite.All, RoleManagement.ReadWrite.Directory The retrieved App roles are added to the service principal of the managed identity you provided. EXAMPLES EXAMPLE 1, AzureAD Module This example will add the Sites.ReadWrite.All and Directory.ReadWrite.All app roles to the managed identity with the name test on the tenant with id xxxx-xxxx-xxxx ./Add-GraphPermissionsToManagedIdentity-AzureADModule.ps1 -tenantId xxxx-xxxx-xxxx -managedIdentityName test -permissions @(\"Directory.ReadWrite.All\",\"Sites.ReadWrite.All\") EXAMPLE 2, Az Module This example will add the Sites.ReadWrite.All and Directory.ReadWrite.All app roles to the managed identity with the objectId yyyy-yyyy-yyyy on the tenant with id xxxx-xxxx-xxxx ./Add-GraphPermissionsToManagedIdentity-AzModule.ps1 -tenantId xxxx-xxxx-xxxx -managedIdentityObjectId yyyy-yyyy-yyyy -permissions @(\"Directory.ReadWrite.All\",\"Sites.ReadWrite.All\") Tags MS Graph Azure AD Powershell"
  },
  "PowerShell/Add-TermGroupSPAdmin/Add-TermGroupSPAdmin.html": {
    "href": "PowerShell/Add-TermGroupSPAdmin/Add-TermGroupSPAdmin.html",
    "title": "Add-TermGroupSPAdmin | DW Scripts Lib",
    "summary": "Add-TermGroupSPAdmin SYNOPSIS This script can be used to add the sp add-in account (app@sharepoint) to a term group. In the modern taxonomy store this cannot be done manually anymore. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Add-TermGroupSPAdmin AUTHOR Name: Jens Van Dale Email: jens.vandale@delaware.pro SYNTAX Add admin to tenant taxonomy store .\\Add-TermGroupSPAdmin.ps1 -siteUrl <string> -termGroupName <string> Prerequisites The following PowerShell modules need to be installed: PnP.PowerShell SharePoint Online Management Shell Description The following steps are executed in this script: Some SharePoint dll's are loaded from the SharePoint Online Management Shell (Taxonomy) A connection to SharePoint is made using PnP.PowerShell A taxonomy session is build The term gropu is loaded based on the provided term group name The app@sharepoint account is added as a admin to this term group The SharePoint connection is disconnected EXAMPLES EXAMPLE 1 This command will add the app@sharepoint account as an admin to the Products term group on the contoso tenant .\\Add-TermGroupSPAdmin.ps1 -siteUrl \"https://contoso-admin.sharepoint.com\" -termGroupName \"Products\" Tags SharePoint online Taxonomy"
  },
  "PowerShell/Assign-FieldCustomizerExtension/Assign-FieldCustomizerExtension.html": {
    "href": "PowerShell/Assign-FieldCustomizerExtension/Assign-FieldCustomizerExtension.html",
    "title": "Assign-FieldCustomizerExtension | DW Scripts Lib",
    "summary": "Assign-FieldCustomizerExtension SYNOPSIS This small PowerShell script can be used to assign an SPFx field customizer extension to a SharePoint column. The extension can be assigned to a field on site level or list level based on the client side component id of the SPFx solution SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Assign-FieldCustomizerExtension AUTHOR Name: Robin Agten Email: robin.agten@delaware.pro SYNTAX .\\Assign-FieldCustomizerExtension.ps1 -siteCollectionUrl <string> -fieldInternalName <string> -clientSideComponentId <string> -listName <string> [-updateExistingLists] Prerequisites PnP.PowerShell v1.22 (will be installed automatically if not available) Description This script will execute the following: Install PnP.PowerShell if needed Get the SP field based on the internal name and list name Update the SP field porperty clientSideComponentId with the provided id EXAMPLES EXAMPLE 1: Assign to site level column .\\Assign-FieldCustomizerExtension.ps1 -siteCollectionUrl \"https://contoso.sharepoint.com/sites/form-customizer\" -fieldInternalName \"Title\" -clientSideComponentId \"f5b9454b-ba41-487b-9978-8d526f7f838d\" EXAMPLE 2: Assign to site level column and update all lists that contain the column .\\Assign-FieldCustomizerExtension.ps1 -siteCollectionUrl \"https://contoso.sharepoint.com/sites/form-customizer\" -fieldInternalName \"Title\" -clientSideComponentId -updateExistingLists EXAMPLE 3: Assing to list level column .\\Assign-FieldCustomizerExtension.ps1 -siteCollectionUrl \"https://contoso.sharepoint.com/sites/form-customizer\" -fieldInternalName \"Title\" -clientSideComponentId -listName \"FieldCustomizer\" Tags SharePoint SPFx field customizer"
  },
  "PowerShell/Copy-FolderToDifferentSiteDifferentTenant/Copy-FolderToDifferentSiteDifferentTenant.html": {
    "href": "PowerShell/Copy-FolderToDifferentSiteDifferentTenant/Copy-FolderToDifferentSiteDifferentTenant.html",
    "title": "Copy-FolderToDifferentSiteDifferentTenant | DW Scripts Lib",
    "summary": "Copy-FolderToDifferentSiteDifferentTenant SYNOPSIS This script will copy the contents of a folder from one site to a specific folder in the target. This all based on the values in the input csv. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Copy-FolderToDifferentSiteDifferentTenant AUTHOR Name: Pieter Vandendriessche Email: pieter.vandendriessche@delaware.pro Prerequisites A user account with sufficient privileges on source site (first prompt) A user account with sufficient privileges on destination site (second prompt) Parameters Variable name Variable Description Example $inputCsv The absolute path of the input csv / Input file Column Name Column Description Example srcSiteURL The url of the source site https://x.sharepoint.com/sites/PJ-050 dstSiteUrl the url of the destination site https://x.sharepoint.com/sites/PJ-051 srcFolder The name of the folder where the input needs to be copied from. Project Management dstFolder The name of the folder where the files need to be dropped in Project Delivery/01. Opportunity Sketch libraryName The name of the library where the files originate from Documents Example .\\Copy-FolderToDifferentSiteDifferentTenant.ps1 -inputCsv \"\""
  },
  "PowerShell/Explore-MicrosoftGraphModule/Explore-MicrosoftGraphModule.html": {
    "href": "PowerShell/Explore-MicrosoftGraphModule/Explore-MicrosoftGraphModule.html",
    "title": "Microsoft Graph | DW Scripts Lib",
    "summary": "Microsoft Graph SYNOPSIS This script guides you through the basics of how to get started with the Microsoft Graph PowerShell SDK. This replaces the soon to be deprecated / retired AzureAD PowerShell module. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/MicrosoftGraph AUTHOR Name: Pieter Heemeryck Email: pieter.heemeryck@delaware.pro Prerequisites PowerShell module 'Microsoft.Graph' PowerShell version >5.1 .NET Framework 4.7.2 or later Description This script guides you through: Installing the MS Graph PS SDK Connecting to the Graph in several ways Discovery of required scope permissions to execute certain commandlets Discovery of commandlets Help with commandlets (parameters & samples) Executing some basic commands (get user, get teams, get channel) Disconnect from the Graph #region Prepare # Basics: https://learn.microsoft.com/en-us/powershell/microsoftgraph/get-started?view=graph-powershell-1.0 # Install-Module Microsoft.Graph -Scope CurrentUser # Get-InstalledModule Microsoft.Graph # Make sure you connect with sufficient permissions. To do this, you need to know what commandlets require which permissions Find-MgGraphCommand -command Get-MgUser | Select -First 1 -ExpandProperty Permissions # Discover available commands: Get-Command -Module Microsoft.Graph* *team* # Get detailed parameter info and samples on how to use Get-Help Get-MgUser -Detailed #endregion #region Connect to Graph # https://learn.microsoft.com/en-us/powershell/microsoftgraph/authentication-commands?view=graph-powershell-1.0 Connect-MgGraph -Scopes \"User.Read.All\",\"Group.ReadWrite.All\" # interactive & delegated Connect-MgGraph -AccessToken $myAccessToken # access token already contains scope $clientId = \"\" $tenantId = \"\" $certThumbprint = \"\" Connect-MgGraph -ClientId $clientId -TenantId $tenantId -CertificateThumbprint $certThumbprint # have the certificate installed correctly on local machine + uploaded to AAD app # Create self-signed certificate using PowerShell: https://learn.microsoft.com/en-us/entra/identity-platform/howto-create-self-signed-certificate $clientSecretCredential = Get-Credential -Credential $clientId # Enter client_secret in the password prompt. Connect-MgGraph -TenantId $tenantId -ClientSecretCredential $clientSecretCredential Connect-MgGraph -Identity # system-assigned managed identity Connect-MgGraph -Identity -ClientId \"User_Assigned_Managed_identity_Client_Id\" # user-assigned managed identity Get-MgContext # check your connection (e.g. AuthType) #endregion #region Execute commands Get-MgUser # get all users $user = Get-MgUser -Filter \"displayName eq 'Test user'\" Get-MgUserJoinedTeam -UserId $user.Id $teamId = \"\" $team = Get-MgTeam -TeamId $teamId Get-MgTeamChannel -TeamId $team.Id $channel = Get-MgTeamChannel -TeamId $teamId -Filter \"displayName eq 'General'\" $primaryChannel = Get-MgTeamPrimaryChannel -TeamId $teamId # reference: https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.teams/?view=graph-powershell-1.0 #endregion #region Close up Disconnect-MgGraph #endregion Tags Azure AD Graph MS Teams SharePoint"
  },
  "PowerShell/Export-TermSet/Export-TermSet.html": {
    "href": "PowerShell/Export-TermSet/Export-TermSet.html",
    "title": "Export-TermSet | DW Scripts Lib",
    "summary": "Export-TermSet SYNOPSIS Exports all terms from a specified Term Set in SharePoint Online, including their labels and translations, to a CSV file. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Export-TermSet AUTHOR Name: Robin Agten Email: robin.agten@delaware.pro SYNTAX Export-TermSet (Default) Export-TermSet -ClientId <String> -TenantName <String> -TermGroupName <String> -TermSetName <String> [-OutputPath <String>] [-LocaleIds <Int[]>] Prerequisites PowerShell version 7 PnP PowerShell module installed (version 2.12 or higher) SharePoint Online tenant admin credentials Permissions to access the specified Term Set in SharePoint Online Description This script connects to SharePoint Online using the PnP PowerShell module and exports all terms from a specified Term Set to a CSV file. It includes term details such as term ID, name, path, and labels (default and non-default) for specified locale IDs. The output file is saved to the specified path or the script's root directory. EXAMPLES EXAMPLE 1 Export terms from a Term Set without specifying locale IDs. Export-TermSet -ClientId \"your-client-id\" -TenantName \"your-tenant-name\" -TermGroupName \"GroupName\" -TermSetName \"SetName\" EXAMPLE 2 Export terms from a Term Set with locale-specific labels. Export-TermSet -ClientId \"your-client-id\" -TenantName \"your-tenant-name\" -TermGroupName \"GroupName\" -TermSetName \"SetName\" -LocaleIds 1033,1036 EXAMPLE 3 Export terms to a custom output path. Export-TermSet -ClientId \"your-client-id\" -TenantName \"your-tenant-name\" -TermGroupName \"GroupName\" -TermSetName \"SetName\" -OutputPath \"C:\\Exports\" Tags SharePoint Taxonomy"
  },
  "PowerShell/Import-KeyVaultFromExcel/Import-KeyVaultFromExcel.html": {
    "href": "PowerShell/Import-KeyVaultFromExcel/Import-KeyVaultFromExcel.html",
    "title": "Import-KeyVaultFromExcel | DW Scripts Lib",
    "summary": "Import-KeyVaultFromExcel SYNOPSIS This script imports keyVault secrets based on an excel sheet. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Import-KeyVaultFromExcel AUTHOR Name: Pieter Vandendriessche Email: pieter.vandendriessche@delaware.pro SYNTAX Add admin to tenant taxonomy store .\\Import-KeyVaultFromExcel.ps1 -subscriptionId <string> -keyVaultName <string> -fileName <string> -sheetName <string> Prerequisites The following PowerShell modules need to be installed: AzureAD PowerShell The following input needs to be prepared: Excel file with the key in the first column and the value in the second (first row is header). Please see example in folder of script Description The following steps are executed in this script: A login prompt for the entered subscription will happen, an admin on the subscription needs to login The excel will be read Each added secret will be added to the KeyVault EXAMPLES EXAMPLE 1 This command will add the app@sharepoint account as an admin to the Products term group on the contoso tenant .\\Import-KeyVaultFromExcel.ps1 -subscriptionId \"67d1f400-991a-4960-9d1d-32d8899515c9\" -keyVaultName \"sibe-wp-mig-ast-tst-kv\" -fileName \"KeyVaultSecrets.xlsx\" -sheetName \"Sheet 1\" Tags Key Vault Azure AD"
  },
  "PowerShell/Reset-SiteSearchIndex/Reset-SiteSearchIndex.html": {
    "href": "PowerShell/Reset-SiteSearchIndex/Reset-SiteSearchIndex.html",
    "title": "Reset-SiteSearchIndex | DW Scripts Lib",
    "summary": "Reset-SiteSearchIndex SYNOPSIS This script allows you to reset the search index for a specific site collection or a set of site collections. Warning Be careful when using this script. Resetting the search index of site might cause heavy loads on the search index process of your tenant. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Reset-SiteSearchIndex AUTHOR Name: Robin Agten Email: robin.agten@delaware.pro Prerequisites PnP.PowerShell v1.22 (will be installed automatically if not available) Description This script will follow the following execution path: Install PnP.PowerShell if not available Check if the allSiteCollections flag is enables If enabled: Validate if the sp admin url is provided Validate and warn if no url filter is provided Fetch all site collections Loop all site collections and reindex Else: Validate if the site collection url is provided Reindex the site collection EXAMPLES EXAMPLE 1 - Single site collection .\\Reset-SiteSearchIndex.ps1 -siteCollectionUrl \"https://site.sharepoint.com/sites/sitecollection1\" EXAMPLE - Multiple site collections All site collections containing '/contoso-' in the url will be reset .\\Reset-SiteSearchIndex.ps1 -multipleSiteCollections -spAdminUrl \"https://agtenrdev-admin.sharepoint.com\" -siteCollectionUrlFilter '/contoso-' EXAMPLE - All site collections All site collections containing '/contoso-' in the url will be reset .\\Reset-SiteSearchIndex.ps1 -multipleSiteCollections -spAdminUrl \"https://agtenrdev-admin.sharepoint.com\" Tags SharePoint Search"
  },
  "PowerShell/Reset-UserStorageQuota/Reset-UserStorageQuota.html": {
    "href": "PowerShell/Reset-UserStorageQuota/Reset-UserStorageQuota.html",
    "title": "Reset-UserStorageQuota | DW Scripts Lib",
    "summary": "Reset-UserStorageQuota SYNOPSIS This script resets the storage quota for an end-user to the quota that has been set in the tenant settings. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Reset-UserStorageQuota AUTHOR Name: Pieter Vandendriessche Email: pieter.vandendriessche@delaware.pro SYNTAX .\\Reset-UserStorageQuota.ps1 Description The following steps are executed in this script: When the module is not installed, it will install automatically Input for the tenant admin site url will be asked A login prompt will be shown, log in with the tenant administrator credentials The script fetches all the sites and reset the quota if different from tenant quota Tags Storage OneDrive SharePoint Administration"
  },
  "PowerShell/Restore-DeletedTermSet/Restore-DeletedTermSet.html": {
    "href": "PowerShell/Restore-DeletedTermSet/Restore-DeletedTermSet.html",
    "title": "Restore-DeletedTermSet | DW Scripts Lib",
    "summary": "Restore-DeletedTermSet SYNOPSIS This script can be used to restore a deleted term set by using the TaxonomyHiddenList of a site to restore the used terms. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Restore-DeletedTermSet AUTHOR Name: Ruben Grillaert Email: ruben.grillaert@delaware.pro SYNTAX Restore deleted term set .\\Restore-DeletedTermSet.ps1 -TaxonomyHiddenListId <string> -RemovedTermSetId <string> -RemovedTermSetName <string> -RemovedTermSetGroupName <string> -SiteUrl <string> Prerequisites To run the script, the PnP.PowerShell module needs to be installed. Further, the following parameters are needed: TaxonomyHiddenListId: can be found by adding \"/Lists/TaxonomyHiddenList\" to the site url RemovedTermSetId: the TaxonomyHiddenList contains a field with an ID reference to the term set. By looking for a term in the deleted term set, you can find the ID. RemovedTermSetName: name of the term set that has been removed. RemovedTermSetGroupName: term group name where the term set was stored. SiteUrl: site where the terms are used. This script is not ready to be used for multiple sites because if a child term doesn't have a parent yet in the term set, it will create that term with the correct label but not the correct ID. However, the first part can be modified to group all the data of different sites. Description When running the script, the following steps are executed: Creating a connection with SharePoint. This shows a pop-up the first time. Get all the terms from the TaxonomyHiddenList. Create the missing term set if needed. If the term set exists, the script continues. Adding all root terms that are used directly or that have a child term that is used. Adding all child terms by depth incremental. This step also adds parent terms (with a random ID) that were not used in order to restore the tree structure. EXAMPLES EXAMPLE 1 .\\Restore-DeletedTermSet.ps1 -TaxonomyHiddenListId \"21d0b4a0-8f88-4409-8597-dd2c83f3e98e\" -RemovedTermSetId \"0fe908e1-1feb-45cd-9152-bfa892412b62\" -RemovedTermSetName \"ContosoTermSet\" -RemovedTermSetGroupName \"ContosoTermGroup\" -SiteUrl \"https://contoso.sharepoint.com/sites/example\" Tags SharePoint online Taxonomy"
  },
  "PowerShell/Set-DefaultValuesFolder/Set-DefaultValuesFolder.html": {
    "href": "PowerShell/Set-DefaultValuesFolder/Set-DefaultValuesFolder.html",
    "title": "Set-DefaultValuesFolder | DW Scripts Lib",
    "summary": "Set-DefaultValuesFolder SYNOPSIS This script connects to a SharePoint site and sets default column values for folders in a document library based on data from CSV files. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Set-DefaultValuesFolder AUTHOR Name: Arne Meersman Email: arne.meersman@delaware.pro SYNTAX Set .\\Set-DefaultValuesFolder.ps1 -clientId <string> -siteUrl <string> -libraryName <string> -pathToDataCsv <string> -pathToConfigCsv <string> -folderKey <string> Prerequisites The following PowerShell modules need to be installed: PnP PowerShell The following input needs to be prepared: Data CSV file: Contains folder name and values to be set (first row is header) Config CSV file: Maps columns in the data file to SharePoint fields (first row is header) Description The following steps are executed in this script: The script connects to the specified SharePoint site. The data from the CSV file is read, including folder paths and values for columns. Each folder will have its default column values set based on the data and configuration provided. EXAMPLES EXAMPLE 1 This command will set default column values for folders in the \"Documents\" library of the \"https://contoso.sharepoint.com/sites/example\" SharePoint site: .\\Set-DefaultValuesFolder.ps1 -clientId \"your-client-id\" -siteUrl \"https://contoso.sharepoint.com/sites/example\" -libraryName \"Documents\" -pathToDataCsv \"defaultColumnValues.csv\" -pathToConfigCsv \"config.csv\" -folderKey \"folder\" Tags SharePoint PnP PowerShell Document Library Default Column Values"
  },
  "PowerShell/Set-DirectoryClassificationSetting/Set-DirectoryClassificationSetting.html": {
    "href": "PowerShell/Set-DirectoryClassificationSetting/Set-DirectoryClassificationSetting.html",
    "title": "Set-DirectoryClassificationSetting | DW Scripts Lib",
    "summary": "Set-DirectoryClassificationSetting SYNOPSIS This script allows you to set the allowed classification list and creates a new group setting object if not already present. It also shown a warning if EnableMIPLabels is set to true, this would mean that the classification settings will be ignored. Originally this script was also going to include setting the DefaultClassification & ClassificationDescriptions settings, but at the time of making the script these give HTTP 500 errors (beta endpoints be like \uD83D\uDE09), if required, these can be added in the same way as the ClassificationList setting. Warning This script uses commands that are still in beta! SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Set-DirectoryClassificationSetting AUTHOR Name: Ewout Hebbrecht Email: ewout.hebbrecht@delaware.pro Original creator: Nick Sevens Original creator email: nick.sevens@delaware.pro Prerequisites An app registration with graph application Directory.ReadWrite.All permission, for Workspaces this should be the main app registration. A certificate added to the same app registration for authentication, this certificate is also installed on your machine for use Description This script will follow the following execution path: Install Microsoft.Graph & Microsoft.Graph.Beta if not already installed Get existing Group.Unified setting Create new Group.Unified setting if none was found Set ClassificationList if value is provided Parameters Variable name Mandatory Variable Description Example $ClassificationList False A comma-delimited list of valid classification values that can be applied to Microsoft 365 groups. Internal,Confidential $TenantId True The tenant ID of the app registration 00000000-0000-0000-0000-000000000000 $ClientId True The client ID of the app registration 00000000-0000-0000-0000-000000000000 $CertificateThumbprint True The thumprint of the certificate installed on the app registration a909502dd82ae41433e6f83886b00d4277a32a7b All parameters are of type string EXAMPLES EXAMPLE 1 This will set the ClassificationList setting. .\\Set-DirectoryClassificationSetting -ClassificationList \"Internal,Confidential\" -TenantId \"00000000-0000-0000-0000-000000000000\" -ClientId \"00000000-0000-0000-0000-000000000000\" -CertificateThumbprint \"a909502dd82ae41433e6f83886b00d4277a32a7b\" Tags Azure AD Graph"
  },
  "PowerShell/Set-FileMetadataFromParentFolder/Set-FileMetadataFromParentFolder.html": {
    "href": "PowerShell/Set-FileMetadataFromParentFolder/Set-FileMetadataFromParentFolder.html",
    "title": "Set-FileMetadataFromParentFolder | DW Scripts Lib",
    "summary": "Set-FileMetadataFromParentFolder SYNOPSIS This script updates the metadata of files based on the parent folder in a SharePoint document library. It ensures that files get the same metadata as their parent folder, one level above. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Set-FileMetadataFromParentFolder AUTHOR Name: Arne Meersman Email: arne.meersman@delaware.pro SYNTAX Update file metadata based on parent folder Set-FileMetadataFromParentFolder -ClientId <String> -SiteUrl <String> -LibraryName <String> -FieldsToCheck <String[]> [-StartId <Int>] [-EndId <Int>] Prerequisites The following PowerShell modules need to be installed: PnP PowerShell To successfully execute this script, the following prerequisites must be met: You have the necessary permissions to make changes to the files in the library. Ensure metadata fields are configured in the SharePoint library. !!If there is no metadata on the parent folder, the metadata on its child files will be removed!! Description This script updates the metadata of files based on the parent folder in a SharePoint document library. It ensures that files get the same metadata as their parent folder, one level above. Additionally, you have the option to define a start and end point to run the script for a specific section of the library or to execute the script in smaller parts. You also have the ability to choose which metadata fields you want to copy to the files. EXAMPLES EXAMPLE 1: Don't use startId & endId Set metadata based on parent folders for the following metadata fields: Project, Project Name, Field3, Field4. In this example we go over the whole library. .\\Set-MetadataBasedOnParent.ps1 -clientId \"your-client-id\" -siteUrl \"https://contoso.sharepoint.com/sites/example\" -libraryName \"Documents\" -fieldsToCheck @(\"Project\", \"Project_x0020_Name\", \"Field3\", \"Field4\") EXAMPLE 2: Use startId & endId Set metadata based on parent folders for the following metadata fields: Project, Project Name, Field3, Field4. In this example we use the startId and endId to edit files with Id between 100000 and 200000. .\\Set-MetadataBasedOnParent.ps1 -clientId \"your-client-id\" -siteUrl \"https://contoso.sharepoint.com/sites/example\" -libraryName \"Documents\" -fieldsToCheck @(\"Project\", \"Project_x0020_Name\", \"Field3\", \"Field4\") -startId 100000 -endId 200000 Tags SharePoint PnP.PowerShell Metadata Management"
  },
  "PowerShell/Set-TeamsPolicyToAadGroup/Set-TeamsPolicyToAadGroup.html": {
    "href": "PowerShell/Set-TeamsPolicyToAadGroup/Set-TeamsPolicyToAadGroup.html",
    "title": "Set-TeamsPolicyToAadGroup | DW Scripts Lib",
    "summary": "Set-TeamsPolicyToAadGroup SYNOPSIS This script is used to apply a Teams app permission and app setup policy to an AAD group. Teams admin center does not support adding app permission policy by group. SOURCE https://github.com/dlw-digitalworkplace/dw-script-lib/tree/main/PowerShell/Set-TeamsPolicyToAadGroup AUTHOR Name: Ewout Hebbrecht Email: ewout.hebbrecht@delaware.pro Original creator: Pieter Heemeryck Original creator email: pieter.heemeryck@delaware.pro SYNTAX Apply teams permission & setup policy to group .\\Set-TeamsPolicyToAadGroup -groupObjectId <string> -appPolicyname <string> -setupPolicyname <string> Remove teams permission & setup policy from group .\\Set-TeamsPolicyToAadGroup -groupObjectId <string> Prerequisites requires Powershell 5.1 Modules AzureADPreview & MicrosoftTeams will be installed using the script if not present. Description The script executes the following steps: Checks if AzureADPreview & MicrosoftTeams are installed and installs them if not present Connnects to AzureAD & MicrosoftTeams Collects all the members in the group. Note: guests are not included Applies the app permission policy to all the members Applies the app setup policy to all the members The AzureAD & MicrosoftTeams connection is disconnected EXAMPLES EXAMPLE 1 This will add the members from the group \"ba918eaa-4643-43ef-959b-a7870440678e\" to the app policy with the name \"App Pilot Users\" and to the setup policy with the name \"Setup Pilot Users\". .\\Set-TeamsPolicyToAadGroup -groupObjectId \"ba918eaa-4643-43ef-959b-a7870440678e\" -appPolicyname \"App Pilot Users\" -setupPolicyname \"Setup Pilot Users\" EXAMPLE 2 This will remove any app policy and setup policy from the members in the group \"ba918eaa-4643-43ef-959b-a7870440678e\". .\\Set-TeamsPolicyToAadGroup -groupObjectId \"ba918eaa-4643-43ef-959b-a7870440678e\" Tags MS Teams Azure AD"
  },
  "README.html": {
    "href": "README.html",
    "title": "dw-script-lib | DW Scripts Lib",
    "summary": "dw-script-lib Library of reusable PowerShell scripts and console application (C#) containing a broad range of M365 integration options. Check out this link for the full documentation."
  },
  "general/index.html": {
    "href": "general/index.html",
    "title": "Introduction | DW Scripts Lib",
    "summary": "Introduction Welcome to the dw-script-lib. This page will give you all relevant information regarding this library. Check out the navigation to the left to find your topic"
  },
  "general/submission-guidelines.html": {
    "href": "general/submission-guidelines.html",
    "title": "Submission guidelines | DW Scripts Lib",
    "summary": "Submission guidelines Do you have a possible interesting and reusable script, then this page is for you. There are two options to submit: Using a Pull Request (technical) Using a GitHub Issue Submitting a Pull Request The first step when submitting a new script, is to pull the code to your local machine (git clone https://github.com/dlw-digitalworkplace/dw-script-lib.git). Create a new branch that starts from the main branch and use the following naming convention: submission/[name-of-script] Create a new folder in the PowerShell or ConsoleApps folder (depending on what you are submitting). Give the folder a clear name (e.g. Add-UserToGroup, Update-SharePointListColumn, ...) Copy the content Example.md file from the /Templates to your new folder. (The templates folder contains an example structure of how your scripts folder should look like) Add the PowerShell script or Console app code to the same folder. Make sure the PS filename is the same as the .md file Update the .md file with all the needed details Update the toc.yml file in the PowerShell or ConsoleApps folder and include your new script. Navigate to GitHub and create a new pull request into the main branch. Select either the 'New PowerShell Script' or 'New Console Application' template and fill in all the details Wait for approval \uD83C\uDF89 Creating a GitHub Issue Navigate to the GitHub repo Go to \"Issues\" and create a new one Select the 'Script Submission Request' template Fill in all the template details. Someone from the dw-script-lib team will contact you \uD83C\uDF89"
  },
  "index.html": {
    "href": "index.html",
    "title": "DW Script Lib. | DW Scripts Lib",
    "summary": "DW Script Lib. Welcome to the dw-script-lib documentation page. This library is intented to have one centralized location of all PowerShell scripts and Console applications that are reusable. Here you will find all relevant information regarding the script (how to use them, how to contribute, ...). General information The general information page will give you all the details you need about this library. Do you want to contribute to the library? Do you have a script that you think might be usefull? do you see additions to the framework itself? All these question will be handled there PowerShell The PowerShell section is the place-to-be for all Microfoft relates PowerShell script. All the scripts are listed with all the needed information like prerequisites, technology and even examples Console Applications Do you think PowerShell will not solve your problem and that you will need some C# magic, definately check out the Console Apps sections. Here you will find small console applications that interact with Miscrosoft systems with documentation and examples Search Not sure what you are looking for? Just use the search box in the upper right corner and see what you can find \uD83D\uDE0A. Issues If you encounter any kind of issues with this library, feel free to log an issue on GitHub"
  }
}